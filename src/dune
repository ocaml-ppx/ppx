(library
 (name ppx)
 (public_name ppx)
 (libraries
  ocaml-compiler-libs.common
  compiler-libs.common
  ocaml-compiler-libs.shadow
  ocaml-migrate-parsetree
  ppx.ast_deprecated
  ppx.bootstrap
  ppx.print_diff
  ppx_derivers
  ppx_traverse_builtins
  stdppx)
 (flags (:standard -open Ocaml_shadow -safe-string))
 (ppx.driver
  (main       Ppx.Driver.standalone)
  (replaces   ocaml-migrate-parsetree)
  (flags      (-corrected-suffix %{corrected-suffix} -diff-cmd - -dump-ast))
  (lint_flags (-corrected-suffix %{corrected-suffix} -diff-cmd - -null    ))))

(alias
 (name DEFAULT)
 (deps cinaps_helpers (:ml (glob_files *.ml)) (:mli (glob_files *.mli)))
 (action (run %{bin:cinaps} %{ml} %{mli})))

(rule
 (targets ast_pattern_generated.ml)
 (deps    gen/gen_ast_pattern.exe)
 (action  (run ./gen/gen_ast_pattern.exe %{lib:ppx.ast_deprecated:ast.ml})))

(rule
 (targets ast_builder_generated.ml)
 (deps gen/gen_ast_builder.exe)
 (action  (run ./gen/gen_ast_builder.exe %{lib:ppx.ast_deprecated:ast.ml})))

(alias
 (name cinaps)
 (deps cinaps_helpers (:ml (glob_files *.ml)) (:mli (glob_files *.mli)))
 (action (progn
          (run %{bin:cinaps} -no-color -diff-cmd - %{ml} %{mli})
          (diff? code_matcher.ml code_matcher.ml.cinaps-corrected)
          (diff? driver.ml driver.ml.cinaps-corrected)
          (diff? context_free.ml context_free.ml.cinaps-corrected)
          )))

;; This is to make the code compatible with different versions of
;; OCaml
(rule
 (targets compiler_specifics.ml)
 (deps    gen-compiler_specifics)
 (action  (run %{ocaml} %{deps} %{ocaml_version} %{targets})))
